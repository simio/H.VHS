default namespace huggplay = "http://play.huggpunkt.org/vhsxml/1"

grammar {
    start =
        element vhsxml {
            attribute version { "1.1" },
            ( transportDefinitions?
                & formatDefinitions?
                & extensions?
                & cassettes? )
        }

    #
    #  TRANSPORT DEFINITIONS
    #
    transportDefinitions =
        element transportDefinitions { transportDefinition+ }
    transportDefinition =
        element transportDefinition {
            timestampedId,
            i18nName+,
            i18nDesc*
        }

    #
    #  STREAM/FILE FORMAT DEFINITIONS
    #
    formatDefinitions =
        element formatDefinitions { formatDefinition+ }
    formatDefinition =
        element formatDefinition {
            timestampedId,
            i18nName+,
            i18nDesc*,
            element completeness { "notEmpty" | "metaOnly" | "dataOnly" | "complete" },
            element isText { "true" | "false" }
            mimeType
        }

    #
    #  H.VHS EXTENSIONS
    #
    extensions =
        element extensions { extension+ }
    extension =
        element extension {
            timestampedId,
            i18nName+,
            i18nDesc*,
            # At least one author is required because of licensing issues.
            element authors {
                author+
            },
            # License statement. Specify name of license and where to find the full text.
            element license {
                attribute href { xsd:anyURI }?,
                xsd:token
            },
            # <enabled> will be ignored if set by extension authors
            element enabled { "true" | "false" }?,
            # <basePath> will be ignored if set by extension authors
            element basePath { xsd:string }?,
            element condition { "broken" | "unstable" | "stable" | "testing" }?,
            source,
            element convertsFrom {
                element transport { xsd:NMTOKEN }+,
                element format { xsd:NMTOKEN }+
            },
            element convertsTo {
                element transport { xsd:NMTOKEN }+,
                element format { xsd:NMTOKEN }+
            },
            # <audits> will be ignored if set by extension authors
            element audits {
                auditor+
            }?
        }
    author =
        # Authors are recommended to provide at least one way of contacting them
        element author {
            # "Copyright (c) COPYRIGHT Name O'Name"
            attribute copyright { xsd:token }?,
            attribute email { xsd:token }?,
            attribute website { xsd:anyURI }?,
            attribute username { xsd:token }?,
            xsd:token
        }
    auditor =
        element audit {
            attribute email { xsd:token }?,
            attribute website { xsd:anyURI }?,
            attribute date { xsd:dateTime }?,
            attribute username { xsd:token }?,
            xsd:token
        }
    source =
        element source {
            # Which version of the API is used. Backwards compatibility
            # is managed by the application.
            attribute version { xsd:NMTOKEN },
            # This group is used for binary extensions and scripted
            # extensions where the source code is not included in this file.
            (
                (
                    # if no source is included, an external source file will be
                    # loaded based on the extension id
                    # might later also accept: "swig", "cabi", "scheme"
                    attribute interface { "qt" | "javascript" },
                    empty
                ) | (
                    # This group is used for scripted extensions where the
                    # source code is included in this file.
                    # <interface> later also accept "scheme"
                    attribute interface { "javascript" },
                    # source code should be encoded as <![CDATA[ ... ]]>
                    xsd:string
                )
            )
        }

    #
    #  CASSETTES
    #
    # While subCassettes define (completing) content, for
    # example video streams of different bitrates but the same
    # actual content, associatedCassettes define content which
    # is not actually part of this cassette, but complementary,
    # for example movie subtitles.
    #
    # The subCassettes element contain mutually exclusive
    # cassettes, and the associatedCassettes element does not.
    cassettes = element cassettes { cassette+ }
    subCassettes = element subCassettes { cassette+ }
    associatedCassettes = element associatedCassettes { cassette+ }
    cassette =
        element cassette {
            timestampedId,  # must begin with "cassette:"
            element presentation {
                attribute xml:lang { xsd:language }?,
                element value {
                    attribute name { xsd:NMTOKEN },
                    xsd:string
                }+
            }*,
            ( internalTypedContent | externalTypedContent | subCassettes ),
            associatedCassettes*
        }
    internalTypedContent =
        element content {
            attribute format { xsd:NMTOKEN },
            attribute mimeType { xsd:token },
            # Enclose in <![CDATA[ ... ]]>
            # Which type is used is defined by the formatDefinition
            # referenced by the "format" attribute of this element.
            # Entering base64 content but referencing a text
            # formatDefinition will result in the content being read as
            # a string, which probably isn't what you want.
            ( xsd:base64Binary | xsd:string )
        }
    externalTypedContent =
        element content {
            attribute format { xsd:NMTOKEN },
            attribute mimeType { xsd:token },
            attribute src { xsd:anyURI },
            empty
        }

    #
    #  DATA TYPES
    #
    timestampedId =
    # releaseDate must use ISO Date format: [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]
    # (http://books.xmlschemata.org/relaxng/ch19-77049.html)
        element id {
            attribute releaseDate { xsd:dateTime },
            # The id value is valid iff it matches regexp [a-z0-9_-]+
            xsd:NMTOKEN
        }
    i18nName =
        element name {
            # Must be unique
            attribute xml:lang { xsd:language },
            # Present name elements must be not empty
            xsd:token
        }
    i18nDesc =
        element description {
            # Must be unique
            attribute xml:lang { xsd:language },
            # Present description elements must be not empty
            xsd:token
        }
    mimeType =
        # MIME types are in priority order.
        element mimeTypes {
          element mimeType { xsd:token }+
        }?
}
